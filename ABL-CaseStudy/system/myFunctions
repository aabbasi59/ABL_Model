/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.2                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

readFields
{
    // Where to load it from (if not already in solver)
    functionObjectLibs ("libfieldFunctionObjects.so");

    type            readFields;
    fields          (p_rgh U k alphat T );
}

extremeValues
{
    type            volumeMinMax;
    outputControlMode timeStep;
    outputInterval 1;
    verbose         true;
    fields          ( epsilon k  U T p_rgh alphat nut );
}

//--------------------------------------------------------
//    heatFlux
//     {
//    type swakExpression;
//    valueType patch;
//    patchName lake;
//    verbose true;
//    variables
//             (
//                 "cp=4.1796e03;"
//                 "rho0=1000;"
// 		"dvis=1.805e-6;"
//                 "nump=0.85;"
//                 );
//    // expression "snGrad(T)";
//        expression "(alphat + dvis/nump)*snGrad(T)";
// 
//     accumulations (min
//                    max
//                    average
//                    sum);
//     verbose true ;
//     }
//--------------------------------------------------------
  hFlux
    {
   type swakExpression;
   valueType patch;
   patchName lake;
   verbose true;
   variables
            (
                "cp=1.005e3;"
                "rho0=1.18;"
		"nu0=16e-6;"
                "nump=0.71;"
                );
   // expression "snGrad(T)";
       expression "cp*rho0*(alphat + nu0/nump)*snGrad(T)";

    accumulations (min
                   max
                   average
                   sum);
    verbose true ;
    }
//--------------------------------------------------------
   hm
    {
   type swakExpression;
   valueType patch;
   patchName lake;
   verbose true;
   variables
            (
                "cp=1.005e3;"
                "rho0=1.180;"
		"mu0=16e-6*rho0;"
	        "n=1/3;"
         	"D=2.2e-5;"
		"nu0=(mu0/rho0);"
		"Sc=(nu0)/D;"
		"aeff=(nu0/0.71+alphat);"
		"K=rho0*cp*aeff;"
		"pr=mu0*cp/K;"
                "nump=0.71;"
		"Hs=cp*rho0*(alphat + nu0/nump)*snGrad(T);"
		"Ta=310.85;"
		"Tw=305.223;"
		"hs=Hs/(Tw-Ta);"
                );
   // expression "snGrad(T)";
       expression "hs*pow(Sc,n)*D/(K*pow(pr,n))";

    accumulations (min
                   max
                   average
                   sum);
    verbose true ;
    }
//--------------------------------------------------------
   Evap
    {
   type swakExpression;
   valueType patch;
   patchName lake;
   verbose true;
   variables
            (
                "cp=1.005e3;"
                "rho0=1.180;"
		"mu0=16e-6*rho0;"
	        "n=1/3;"
         	"D=2.2e-5;"
		"nu0=(mu0/rho0);"
		"Sc=(nu0+nut)/D;"
		"aeff=(nu0/0.71+alphat);"
		"K=rho0*cp*aeff;"
		"pr=mu0*cp/K;"
                "nump=0.71;"
		"Hs=cp*rho0*(alphat + nu0/nump)*snGrad(T);"
		"Ta=310.85;"
		"Tw=305.223;"
		"RH=85;"
		"hs=Hs/(Ta-Tw);"
		"Patm=101325;"
		"pw_air= 10.79574 * (1.0 - 273.16 / ((Ta)))- 5.02800 * log10(((Ta)) / 273.16)+ \
 	                1.50475e-4 * (1 - pow(10, (-8.2969 * (((Ta)) / 273.16 - 1.0)))) + \
 	                0.42873e-3* (pow(10, (4.76955 * (1.0 - 273.16/ ((Ta))))) - 1) + 0.78614;"
 	         "pw_water= 10.79574 * (1.0 - 273.16 / (Tw))- 5.02800 * log10((Tw) / 273.16)+ 1.50475E-4 *\
 	                 (1 - pow(10, (-8.2969 * ((Tw) / 273.16 - 1.0)))) + 0.42873E-3 * (pow(10, (4.76955 * (1.0 - 273.16/ (Tw)))) - 1) + 0.78614;"
 	         "ew=0.622*(pow(10,pw_water)*100*100/100)/(Patm-(pow(10,pw_water)*100*100/100));"
 	         "ea=0.622*(pow(10,pw_air)*100*RH/100)/(Patm-(pow(10,pw_air)*100*RH/100));"
		 "hm=hs*pow(Sc,n)*D/(K*pow(pr,n));"
                );
    //expression "hs*pow(Sc,n)*D/(K*pow(pr,n))";
      expression "hm*(ew-ea)*rho0*24*3600";

    accumulations (min
                   max
                   average
                   sum);
    verbose true ;
    }
//--------------------------------------------------------
