/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default        backward;//Euler;
}

gradSchemes
{
    //default         Gauss linear;
    //grad(U)         cellLimited Gauss linear 1;   
   default         cellMDLimited Gauss linear 1; //An accurate and stable numerical scheme,
}

divSchemes
{
//     default         none;
//     //div(phi,U)      Gauss upwind;
//     div(phi,U)      Gauss linearUpwind grad(U); //An accurate and stable numerical scheme,
//     //div(phi,U)       Gauss linearUpwindV grad(U);//Gauss linearUpwindV grad(U) cellLimited Gauss linear 1;//  Gauss linearUpwindV cellMDLimited Gauss linear 1;
//     div(phi,T)      Gauss upwind;
//    // div(phi,k)      Gauss upwind;
//     div(phi,k) Gauss linearUpwind grad(U); //An accurate and stable numerical scheme,
//    // div(phi,epsilon) Gauss upwind;
//     div(phi,epsilon) Gauss linearUpwind grad(U); //An accurate and stable numerical scheme,
//     div(phi,R)      Gauss upwind;
//     div(R)          Gauss linear;
//     div((nuEff*dev(T(grad(U))))) Gauss linear;
//     div((nuEff*dev(grad(U).T()))) Gauss linear;
//    //div((nuEff*dev(T(grad(U)))))  Gauss linear;  //An accurate and stable numerical scheme,
   default          none;
    div(phi,U)      bounded Gauss upwind;
    div(phi,T)      bounded Gauss upwind;
    div(phi,q)      bounded Gauss upwind;
    div(phi,k)      bounded Gauss upwind;
    div(phi,epsilon) bounded Gauss upwind;
    div((nuEff*dev(T(grad(U))))) Gauss linear;
}
  


laplacianSchemes
{
//     //default         none;
     default     Gauss linear limited corrected 0.333;
//     laplacian(nuEff,U) Gauss linear uncorrected;
//     //laplacian((1|A(U)),p_rgh) Gauss linear uncorrected;
//     laplacian(Dp,p_rgh) Gauss linear uncorrected;
//     laplacian(alphaEff,T) Gauss linear uncorrected;
//     laplacian(DkEff,k) Gauss linear uncorrected;
//     laplacian(DepsilonEff,epsilon) Gauss linear uncorrected;
//     laplacian(DREff,R) Gauss linear uncorrected;
//     default         none;
//     laplacian(nuEff,U) Gauss linear corrected;
//     laplacian(Dp,p_rgh) Gauss linear corrected;
//     laplacian(alphaEff,T) Gauss linear corrected;
//     laplacian(DkEff,k) Gauss linear corrected;
//     laplacian(DepsilonEff,epsilon) Gauss linear corrected;
//     laplacian(DREff,R) Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    //default         uncorrected;
    default         limited corrected 0.333; //An accurate numerical scheme on orthogonal meshes,
     // default   limited 0.777;

}

fluxRequired
{
    default         no;
    p_rgh;
}


// ************************************************************************* //
