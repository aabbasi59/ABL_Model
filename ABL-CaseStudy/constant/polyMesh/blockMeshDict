/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "DomainDim"

convertToMeters  $CFactor; 

vertices
(
    ( $L1  $W1   $H1 ) //0
    ( $L2  $W1   $H1 ) //1
    ( $L2  $W1   $H2 ) //2
    ( $L1  $W1   $H2 ) //3
    ( $L1  $W2   $H1 ) //4
    ( $L2  $W2   $H1 ) //5
    ( $L2  $W2   $H2 ) //6
    ( $L1  $W2   $H2 ) //7
    ( $L2  $W1   $H3 ) //8
    ( $L1  $W1   $H3 ) //9
    ( $L2  $W2   $H3 ) //10
    ( $L1  $W2   $H3 ) //11
    ( $L2  $W1   $H4 ) //12
    ( $L1  $W1   $H4 ) //13
    ( $L2  $W2   $H4 ) //14
    ( $L1  $W2   $H4 ) //15
);


blocks
(
    hex (0 1 5 4 3 2 6 7) ($meshN_x1 $meshN_y1 $meshN_z1) simpleGrading ($meshR_x1 $meshR_y1 $meshR_z1)
    hex (3 2 6 7 9 8 10 11) ($meshN_x1 $meshN_y1 $meshN_z2) simpleGrading ($meshR_x1 $meshR_y1 $meshR_z2)
    hex (9 8 10 11 13 12 14 15) ($meshN_x1 $meshN_y1 $meshN_z3) simpleGrading ($meshR_x1 $meshR_y1 $meshR_z3)
);

edges
(
);

boundary
(
    terrain
    {
        type wall;
        faces
        (
            (0 4 5 1)  //(0 1 5 4)
            //(0 1 2 3)  //(2 6 5 1)
            //(4 7 6 5)  //(0 3 2 1)
            //(0 3 7 4)  //(4 5 6 7)
            //(1 5 6 2)  //(0 4 7 3)
        );
    }
    inlet
    {
        type patch;
	//neighbourPatch outlet;
        faces
        (
            (9 11 15 13)
            (3 7 11 9)
            (0 4 7 3)
        );
    }
    outlet
    {
        type patch;
	//neighbourPatch inlet;
        faces
        (
            (2 6 5 1)
            (8 10 6 2)
            (12 14 10 8)
        );
    }
    back
    {
        type symmetryPlane;//patch;
        //neighbourPatch front;
        faces
        (
           (4 5 6 7)
           (7 6 10 11)
           (11 10 14 15)
        );
    }
    front
    {
        type symmetryPlane;//patch;
        //neighbourPatch back;
        faces
        (
            (0 3 2 1)
            (3 9 8 2)
            (9 13 12 8)
        ); 
    }

    top
    {
        type symmetryPlane;//patch;
        faces
        (
            (13 12 14 15)
        );
    }
);

mergePatchPairs
(
);



// ************************************************************************* //
